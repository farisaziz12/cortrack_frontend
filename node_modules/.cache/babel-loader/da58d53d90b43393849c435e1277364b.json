{"ast":null,"code":"var _jsxFileName = \"/Users/farisaziz/Desktop/Projecs/Cortrack/cortrack_frontend/src/Components/CorMap.js\";\nimport React, { Component } from \"react\";\nimport { dataLayer } from \"./MapStyle.js\";\nimport MapGL, { Source, Layer } from \"react-map-gl\";\nimport { clusterLayer, clusterCountLayer, unclusteredPointLayer } from './layers';\nimport './CorMap.css'; // * as\n\nconst MAPBOX_TOKEN = \"pk.eyJ1IjoiZmFyaXNheml6MTIiLCJhIjoiY2s3cXM3NzBvMDVrZjNlcDRlM2s1N2R3aiJ9.lBO4VnTnXaP9ZpZcJndkIA\";\nexport default class Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      hoveredFeature: null,\n      viewport: {\n        width: 400,\n        height: 400,\n        latitude: 51,\n        longitude: -0.37,\n        zoom: 4\n      },\n      GeoJSONCaseAndMapData: []\n    };\n\n    this._onHover = event => {\n      const {\n        features,\n        srcEvent: {\n          offsetX,\n          offsetY\n        }\n      } = event;\n      const hoveredFeature = features && features[0]._vectorTileFeature.properties.Confirmed ? features[0]._vectorTileFeature.properties : undefined;\n      this.setState({\n        hoveredFeature,\n        x: offsetX,\n        y: offsetY\n      });\n      console.log(hoveredFeature);\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://cortrack.herokuapp.com/getSessionInfo', {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => resp.json()).then(GeoJSONCaseAndMapData => this.setState({\n      GeoJSONCaseAndMapData\n    })).catch(err => {\n      console.log(err);\n    });\n  }\n\n  _renderTooltip() {\n    const {\n      hoveredFeature,\n      x,\n      y\n    } = this.state;\n    return hoveredFeature && React.createElement(\"div\", {\n      className: \"tooltip\",\n      style: {\n        left: x,\n        top: y\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Country/Region: \", hoveredFeature.CountryRegion), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Country/Region: \", hoveredFeature.CountryRegion), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Confirmed Cases: \", hoveredFeature.Confirmed), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Deaths: \", hoveredFeature.Death), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Recoveries: \", hoveredFeature.Recovered));\n  }\n\n  render() {\n    return React.createElement(MapGL, Object.assign({}, this.state.viewport, {\n      width: \"100%\",\n      height: \"100%\",\n      mapStyle: \"mapbox://styles/mapbox/light-v9\",\n      onViewportChange: viewport => this.setState({\n        viewport\n      }),\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      onHover: this._onHover,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(Source, {\n      cluster: true,\n      clusterMaxZoom: 14,\n      clusterRadius: 100,\n      type: \"geojson\",\n      data: \"https://cortrack.herokuapp.com/getSessionInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Layer, Object.assign({}, clusterLayer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })), React.createElement(Layer, Object.assign({}, clusterCountLayer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(Layer, Object.assign({}, unclusteredPointLayer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }))), this._renderTooltip());\n  }\n\n}","map":{"version":3,"sources":["/Users/farisaziz/Desktop/Projecs/Cortrack/cortrack_frontend/src/Components/CorMap.js"],"names":["React","Component","dataLayer","MapGL","Source","Layer","clusterLayer","clusterCountLayer","unclusteredPointLayer","MAPBOX_TOKEN","Map","state","hoveredFeature","viewport","width","height","latitude","longitude","zoom","GeoJSONCaseAndMapData","_onHover","event","features","srcEvent","offsetX","offsetY","_vectorTileFeature","properties","Confirmed","undefined","setState","x","y","console","log","componentDidMount","fetch","method","headers","then","resp","json","catch","err","_renderTooltip","left","top","CountryRegion","Death","Recovered","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { dataLayer } from \"./MapStyle.js\";\nimport MapGL, { Source, Layer } from \"react-map-gl\";\nimport {clusterLayer, clusterCountLayer, unclusteredPointLayer} from './layers';\nimport './CorMap.css'\n\n// * as\n\nconst MAPBOX_TOKEN =\n  \"pk.eyJ1IjoiZmFyaXNheml6MTIiLCJhIjoiY2s3cXM3NzBvMDVrZjNlcDRlM2s1N2R3aiJ9.lBO4VnTnXaP9ZpZcJndkIA\";\n\nexport default class Map extends Component {\n  state = {\n    hoveredFeature: null,\n    viewport: {\n      width: 400,\n      height: 400,\n      latitude: 51,\n      longitude: -0.37,\n      zoom: 4\n    },\n    GeoJSONCaseAndMapData: []\n  };\n\n  componentDidMount() {\n      fetch('https://cortrack.herokuapp.com/getSessionInfo', {\n        method: 'GET',\n        headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n        }\n        }).then(resp => resp.json()).then(GeoJSONCaseAndMapData => this.setState({GeoJSONCaseAndMapData}))\n        .catch(err => {\n            console.log(err);\n        });\n  }\n\n  _onHover = event => {\n    const {\n      features,\n      srcEvent: {offsetX, offsetY}\n    } = event;\n    const hoveredFeature = features&& features[0]._vectorTileFeature.properties.Confirmed? features[0]._vectorTileFeature.properties : undefined\n\n    this.setState({hoveredFeature, x: offsetX, y: offsetY});\n    console.log(hoveredFeature)\n  };\n  \n  _renderTooltip() {\n    const {hoveredFeature, x, y} = this.state;\n\n    return (\n      hoveredFeature && (\n        <div className=\"tooltip\" style={{left: x, top: y}}>\n          <div>Country/Region: {hoveredFeature.CountryRegion}</div>\n          {<div>Country/Region: {hoveredFeature.CountryRegion}</div>}\n          <div>Confirmed Cases: {hoveredFeature.Confirmed}</div>\n          <div>Deaths: {hoveredFeature.Death}</div>\n          <div>Recoveries: {hoveredFeature.Recovered}</div>\n        </div>\n      )\n    );\n  }\n\n\n  render() {\n    return (\n      <MapGL\n        {...this.state.viewport}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle=\"mapbox://styles/mapbox/light-v9\"\n        onViewportChange={viewport => this.setState({ viewport })}\n        mapboxApiAccessToken={MAPBOX_TOKEN}\n        onHover={this._onHover}\n      >\n        <Source cluster={true} clusterMaxZoom={14} clusterRadius={100} type=\"geojson\" data={\"https://cortrack.herokuapp.com/getSessionInfo\"}>\n          <Layer {...clusterLayer} />\n          <Layer {...clusterCountLayer} />\n          <Layer {...unclusteredPointLayer} />\n        </Source>\n        {this._renderTooltip()}\n      </MapGL>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}