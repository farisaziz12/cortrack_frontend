{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Viewport from './viewport';\nimport { zoomToScale, pixelsToWorld, lngLatToWorld, worldToLngLat, getProjectionMatrix, getDistanceScales, getViewMatrix } from './web-mercator-utils';\nimport _fitBounds from './fit-bounds';\nimport * as vec2 from 'gl-matrix/vec2';\n\nvar WebMercatorViewport = function (_Viewport) {\n  _inherits(WebMercatorViewport, _Viewport);\n\n  function WebMercatorViewport() {\n    var _this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        width = _ref.width,\n        height = _ref.height,\n        _ref$latitude = _ref.latitude,\n        latitude = _ref$latitude === void 0 ? 0 : _ref$latitude,\n        _ref$longitude = _ref.longitude,\n        longitude = _ref$longitude === void 0 ? 0 : _ref$longitude,\n        _ref$zoom = _ref.zoom,\n        zoom = _ref$zoom === void 0 ? 0 : _ref$zoom,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? 0 : _ref$pitch,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? 0 : _ref$bearing,\n        _ref$altitude = _ref.altitude,\n        altitude = _ref$altitude === void 0 ? 1.5 : _ref$altitude,\n        _ref$nearZMultiplier = _ref.nearZMultiplier,\n        nearZMultiplier = _ref$nearZMultiplier === void 0 ? 0.02 : _ref$nearZMultiplier,\n        _ref$farZMultiplier = _ref.farZMultiplier,\n        farZMultiplier = _ref$farZMultiplier === void 0 ? 1.01 : _ref$farZMultiplier;\n\n    _classCallCheck(this, WebMercatorViewport);\n\n    width = width || 1;\n    height = height || 1;\n    var scale = zoomToScale(zoom);\n    altitude = Math.max(0.75, altitude);\n    var center = lngLatToWorld([longitude, latitude]);\n    center[2] = 0;\n    var projectionMatrix = getProjectionMatrix({\n      width: width,\n      height: height,\n      pitch: pitch,\n      bearing: bearing,\n      altitude: altitude,\n      nearZMultiplier: nearZMultiplier,\n      farZMultiplier: farZMultiplier\n    });\n    var viewMatrix = getViewMatrix({\n      height: height,\n      scale: scale,\n      center: center,\n      pitch: pitch,\n      bearing: bearing,\n      altitude: altitude\n    });\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebMercatorViewport).call(this, {\n      width: width,\n      height: height,\n      scale: scale,\n      viewMatrix: viewMatrix,\n      projectionMatrix: projectionMatrix\n    }));\n    _this.latitude = latitude;\n    _this.longitude = longitude;\n    _this.zoom = zoom;\n    _this.pitch = pitch;\n    _this.bearing = bearing;\n    _this.altitude = altitude;\n    _this.center = center;\n    _this.unitsPerMeter = getDistanceScales(_assertThisInitialized(_this)).unitsPerMeter[2];\n    Object.freeze(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(WebMercatorViewport, [{\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat) {\n      return lngLatToWorld(lngLat);\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xy) {\n      return worldToLngLat(xy);\n    }\n  }, {\n    key: \"getMapCenterByLngLatPosition\",\n    value: function getMapCenterByLngLatPosition(_ref2) {\n      var lngLat = _ref2.lngLat,\n          pos = _ref2.pos;\n      var fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n      var toLocation = lngLatToWorld(lngLat);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n      return worldToLngLat(newCenter, this.scale);\n    }\n  }, {\n    key: \"getLocationAtPoint\",\n    value: function getLocationAtPoint(_ref3) {\n      var lngLat = _ref3.lngLat,\n          pos = _ref3.pos;\n      return this.getMapCenterByLngLatPosition({\n        lngLat: lngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = this.width,\n          height = this.height;\n\n      var _fitBounds2 = _fitBounds(Object.assign({\n        width: width,\n        height: height,\n        bounds: bounds\n      }, options)),\n          longitude = _fitBounds2.longitude,\n          latitude = _fitBounds2.latitude,\n          zoom = _fitBounds2.zoom;\n\n      return new WebMercatorViewport({\n        width: width,\n        height: height,\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n    }\n  }]);\n\n  return WebMercatorViewport;\n}(Viewport);\n\nexport { WebMercatorViewport as default };","map":{"version":3,"sources":["../../src/web-mercator-viewport.js"],"names":["WebMercatorViewport","Viewport","width","height","latitude","longitude","zoom","pitch","bearing","altitude","nearZMultiplier","farZMultiplier","scale","zoomToScale","Math","center","lngLatToWorld","projectionMatrix","getProjectionMatrix","viewMatrix","getViewMatrix","getDistanceScales","Object","lngLat","xy","worldToLngLat","pos","fromLocation","pixelsToWorld","toLocation","translate","vec2","newCenter","bounds","options","fitBounds"],"mappings":"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","sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport Viewport from './viewport';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\n\nimport * as vec2 from 'gl-matrix/vec2';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   *\n   * @class\n   * @param {Object} opt - options\n   *\n   * @param {Number} opt.width=1 - Width of \"viewport\" or window\n   * @param {Number} opt.height=1 - Height of \"viewport\" or window\n   * @param {Number} opt.scale=1 - Either use scale or zoom\n   * @param {Number} opt.pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param {Number} opt.bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param {Number} opt.altitude= - Altitude of camera in screen units\n   *\n   * Web mercator projection short-hand parameters\n   * @param {Number} opt.latitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.longitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.zoom - Scale = Math.pow(2,zoom) on map (alternative to opt.scale)\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n   */\n  /* eslint-disable complexity */\n  constructor({\n    // Map state\n    width,\n    height,\n    latitude = 0,\n    longitude = 0,\n    zoom = 0,\n    pitch = 0,\n    bearing = 0,\n    altitude = 1.5,\n    nearZMultiplier = 0.02,\n    farZMultiplier = 1.01\n  } = {}) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const center = lngLatToWorld([longitude, latitude]);\n    center[2] = 0;\n\n    const projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      bearing,\n      altitude,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    const viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    super({width, height, scale, viewMatrix, projectionMatrix});\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    this.center = center;\n    this.unitsPerMeter = getDistanceScales(this).unitsPerMeter[2];\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity */\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(lngLat) {\n    return lngLatToWorld(lngLat);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy) {\n    return worldToLngLat(xy);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen\n   * point [x, y]\n   *\n   * @param {Array} lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param {Array} pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return {Array} [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return worldToLngLat(newCenter, this.scale);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}